generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql" // Define qual o banco de dados estamos usando
  url       = env("DATABASE_URL") // fazer conexão com o banco de dados
  directUrl = env("DIRECT_URL") 
}


model Usuario {
  id        Int      @id @default(autoincrement()) // Chave primária
  nome      String
  email     String   @unique 
  telefone        String    
  permissao        String?                 
  servicos  Servico[] // Relacionamento 1:N com Serviços
  localizacaoId   Int
  localizacao     Localizacao  @relation(fields: [localizacaoId], references: [id])
  criadoEm  DateTime @default(now())
  avaliacao Avaliacao[]
}

// Tabela Localização
model Localizacao {
  id        Int      @id @default(autoincrement()) // Chave primária
  numero    String
  bairro    String
  cidade    String
  estado    String
  usuario   Usuario[]
  criadoEm  DateTime @default(now())
}

// Tabela Serviços
model Servico {
  id              Int           @id @default(autoincrement()) 
  nomeNegocio     String
  descricao       String
  usuarioId       Int
  usuario         Usuario @relation(fields: [usuarioId], references: [id])
  categoria       ServicoCategoria[]  // Relacionamento N:N com Categoria
  preco           Preco[]
  avaliacao       Avaliacao[]
  criadoEm        DateTime @default(now())
}

model Categoria {
  id            Int      @id @default(autoincrement()) 
  nomeServico   String   @unique
  servicos      ServicoCategoria[]  // Relacionamento N:N com Servico
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt
}

// Tabela intermediária para a relação N:N entre Servico e Categoria
model ServicoCategoria {
  servicoId   Int
  categoriaId Int
  servico     Servico   @relation(fields: [servicoId], references: [id])
  categoria   Categoria @relation(fields: [categoriaId], references: [id])

  @@id([servicoId, categoriaId]) // Define uma chave primária composta
}


model Avaliacao{
  id            Int           @id @default(autoincrement()) // Chave primária
  star          Float
  descricao     String
  servicoId     Int
  servico       Servico @relation(fields: [servicoId], references: [id])
  usuarioId     Int
  usuario       Usuario @relation(fields: [usuarioId], references: [id])
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime @updatedAt
}
//tabela preco serviço
model Preco{
  id            Int           @id @default(autoincrement()) // Chave primária
  nomeservico   String
  precificacao  Float
  servicoId     Int
  servico       Servico @relation(fields: [servicoId], references: [id])
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime @updatedAt
}
